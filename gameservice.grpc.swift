//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gameservice.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol GamemovePiceToCall: ClientCallUnary {}

fileprivate final class GamemovePiceToCallBase: ClientCallUnaryBase<Move, Empty>, GamemovePiceToCall {
  override class var method: String { return "/Game/movePiceTo" }
}

internal protocol GamerequestToRestartGameCall: ClientCallUnary {}

fileprivate final class GamerequestToRestartGameCallBase: ClientCallUnaryBase<Empty, BoolMessage>, GamerequestToRestartGameCall {
  override class var method: String { return "/Game/requestToRestartGame" }
}

internal protocol GameresponseToRestartGameCall: ClientCallUnary {}

fileprivate final class GameresponseToRestartGameCallBase: ClientCallUnaryBase<BoolMessage, Empty>, GameresponseToRestartGameCall {
  override class var method: String { return "/Game/responseToRestartGame" }
}

internal protocol GamesendCall: ClientCallUnary {}

fileprivate final class GamesendCallBase: ClientCallUnaryBase<Message, Empty>, GamesendCall {
  override class var method: String { return "/Game/send" }
}


/// Instantiate GameServiceClient, then call methods of this protocol to make API calls.
internal protocol GameService: ServiceClient {
  /// Synchronous. Unary.
  func movePiceTo(_ request: Move, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func movePiceTo(_ request: Move, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemovePiceToCall

  /// Synchronous. Unary.
  func requestToRestartGame(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage
  /// Asynchronous. Unary.
  @discardableResult
  func requestToRestartGame(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerequestToRestartGameCall

  /// Synchronous. Unary.
  func responseToRestartGame(_ request: BoolMessage, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func responseToRestartGame(_ request: BoolMessage, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameresponseToRestartGameCall

  /// Synchronous. Unary.
  func send(_ request: Message, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func send(_ request: Message, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall

}

internal extension GameService {
  /// Synchronous. Unary.
  func movePiceTo(_ request: Move) throws -> Empty {
    return try self.movePiceTo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func movePiceTo(_ request: Move, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemovePiceToCall {
    return try self.movePiceTo(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func requestToRestartGame(_ request: Empty) throws -> BoolMessage {
    return try self.requestToRestartGame(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func requestToRestartGame(_ request: Empty, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerequestToRestartGameCall {
    return try self.requestToRestartGame(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func responseToRestartGame(_ request: BoolMessage) throws -> Empty {
    return try self.responseToRestartGame(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func responseToRestartGame(_ request: BoolMessage, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameresponseToRestartGameCall {
    return try self.responseToRestartGame(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func send(_ request: Message) throws -> Empty {
    return try self.send(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func send(_ request: Message, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall {
    return try self.send(request, metadata: self.metadata, completion: completion)
  }

}

internal final class GameServiceClient: ServiceClientBase, GameService {
  /// Synchronous. Unary.
  internal func movePiceTo(_ request: Move, metadata customMetadata: Metadata) throws -> Empty {
    return try GamemovePiceToCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func movePiceTo(_ request: Move, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamemovePiceToCall {
    return try GamemovePiceToCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func requestToRestartGame(_ request: Empty, metadata customMetadata: Metadata) throws -> BoolMessage {
    return try GamerequestToRestartGameCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func requestToRestartGame(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (BoolMessage?, CallResult) -> Void) throws -> GamerequestToRestartGameCall {
    return try GamerequestToRestartGameCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func responseToRestartGame(_ request: BoolMessage, metadata customMetadata: Metadata) throws -> Empty {
    return try GameresponseToRestartGameCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func responseToRestartGame(_ request: BoolMessage, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GameresponseToRestartGameCall {
    return try GameresponseToRestartGameCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func send(_ request: Message, metadata customMetadata: Metadata) throws -> Empty {
    return try GamesendCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func send(_ request: Message, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> GamesendCall {
    return try GamesendCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol GameProvider: ServiceProvider {
  func movePiceTo(request: Move, session: GamemovePiceToSession) throws -> Empty
  func requestToRestartGame(request: Empty, session: GamerequestToRestartGameSession) throws -> BoolMessage
  func responseToRestartGame(request: BoolMessage, session: GameresponseToRestartGameSession) throws -> Empty
  func send(request: Message, session: GamesendSession) throws -> Empty
}

extension GameProvider {
  internal var serviceName: String { return "Game" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/Game/movePiceTo":
      return try GamemovePiceToSessionBase(
        handler: handler,
        providerBlock: { try self.movePiceTo(request: $0, session: $1 as! GamemovePiceToSessionBase) })
          .run()
    case "/Game/requestToRestartGame":
      return try GamerequestToRestartGameSessionBase(
        handler: handler,
        providerBlock: { try self.requestToRestartGame(request: $0, session: $1 as! GamerequestToRestartGameSessionBase) })
          .run()
    case "/Game/responseToRestartGame":
      return try GameresponseToRestartGameSessionBase(
        handler: handler,
        providerBlock: { try self.responseToRestartGame(request: $0, session: $1 as! GameresponseToRestartGameSessionBase) })
          .run()
    case "/Game/send":
      return try GamesendSessionBase(
        handler: handler,
        providerBlock: { try self.send(request: $0, session: $1 as! GamesendSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol GamemovePiceToSession: ServerSessionUnary {}

fileprivate final class GamemovePiceToSessionBase: ServerSessionUnaryBase<Move, Empty>, GamemovePiceToSession {}

internal protocol GamerequestToRestartGameSession: ServerSessionUnary {}

fileprivate final class GamerequestToRestartGameSessionBase: ServerSessionUnaryBase<Empty, BoolMessage>, GamerequestToRestartGameSession {}

internal protocol GameresponseToRestartGameSession: ServerSessionUnary {}

fileprivate final class GameresponseToRestartGameSessionBase: ServerSessionUnaryBase<BoolMessage, Empty>, GameresponseToRestartGameSession {}

internal protocol GamesendSession: ServerSessionUnary {}

fileprivate final class GamesendSessionBase: ServerSessionUnaryBase<Message, Empty>, GamesendSession {}

